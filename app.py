import json
import sqlite3
from flask import Flask, render_template, request, send_from_directory, redirect, session, url_for
import os
import datetime
from werkzeug.utils import secure_filename



app = Flask(__name__, static_folder='templates')
app.secret_key = 'your_secret_key'  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–µ—Å—Å–∏–π

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
UPLOAD_FOLDER = os.path.join('static', 'uploads')
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'jpg', 'jpeg', 'png', 'gif'}
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# üß± –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


# –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ 'main'
@app.route('/<path:path>')
def serve_static(path):
    return send_from_directory(os.path.join(app.static_folder), path)

@app.route('/')
def index():
    return render_template('login.html')  # –ø–æ–∫–∞–∂–µ—Ç login.html –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    return conn

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ö–æ–¥–∞
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'GET':
        return render_template('login.html')
    username = request.form['username']
    password = request.form['password']

    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE username = ? AND password = ?', (username, password))
    user = cursor.fetchone()

    if user:
        session['user_id'] = user['id']
        session['role'] = user['role']
        if user['role'] == 'teacher':
            return redirect(url_for('teacher_dashboard'))  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—á–∏—Ç–µ–ª—è
        else:
            return redirect(url_for('student_dashboard'))  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—á–µ–Ω–∏–∫–∞
    else:
        return '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        role = request.form['role']

        conn = sqlite3.connect('database.db')
        cursor = conn.cursor()

        cursor.execute('INSERT INTO users (username, password, role) VALUES (?, ?, ?)', (username, password, role))
        conn.commit()

        return redirect('/login')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    return render_template('register.html')  # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞
@app.route('/logout')
def logout():
    session.pop('user_id', None)  # –£–¥–∞–ª–∏—Ç—å user_id –∏–∑ —Å–µ—Å—Å–∏–∏
    session.pop('role', None)  # –£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏–∑ —Å–µ—Å—Å–∏–∏
    return redirect('/')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞

@app.route('/teacher')
def teacher_dashboard():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.datetime.now()
    year = current_date.year
    month = current_date.month

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row  # –ù–∞—Å—Ç—Ä–æ–∏–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –∫–∞–∫ —Å–ª–æ–≤–∞—Ä–µ–π
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    cursor.execute("SELECT DISTINCT date FROM assignments WHERE strftime('%Y-%m', date) = ?", (f"{year}-{month:02d}",))
    assignment_dates = {row['date'] for row in cursor.fetchall()}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º row['date'], –ø–æ—Ç–æ–º—É —á—Ç–æ row ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
    conn.close()

    # –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    return render_template('teacher_dashboard.html', year=year, month=month, assignment_dates=assignment_dates)



@app.route('/student')
def student_dashboard():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = datetime.datetime.now()
    year = current_date.year
    month = current_date.month

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row  # <-- –≤–æ—Ç —ç—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT date FROM assignments WHERE strftime('%Y-%m', date) = ?", (f"{year}-{month:02d}",))
    assignment_dates = {row['date'] for row in cursor.fetchall()}
    conn.close()

    return render_template('student_dashboard.html', year=year, month=month, assignment_dates=assignment_dates)



@app.before_request
def check_role():
    if request.path.startswith('/static/'):
        return
    if request.path in ['/login', '/register', '/']:
        return
    if 'role' not in session:
        return redirect(url_for('index'))

@app.route('/')
def calendar_view():
    return render_template('calendar.html')

@app.route('/day/<date>', methods=['GET', 'POST'])
def day_view(date):
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    # –ï—Å–ª–∏ —É—á–∏—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É
    if request.method == 'POST' and session.get('role') == 'teacher':
        content = request.form['content']
        cursor.execute('INSERT INTO assignments (date, content) VALUES (?, ?)', (date, content))
        conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
    cursor.execute('SELECT * FROM assignments WHERE date = ?', (date,))
    assignments = cursor.fetchall()
    conn.close()

    return render_template('day_assignments.html', date=date, assignments=assignments, role=session.get('role'))


@app.route('/delete_assignment/<int:assignment_id>/<date>', methods=['POST'])
def delete_assignment(assignment_id, date):
    if session.get('role') != 'teacher':
        return "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", 403

    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM assignments WHERE id = ?', (assignment_id,))
    conn.commit()
    conn.close()
    return redirect(url_for('day_view', date=date))

@app.route('/edit_assignment/<int:assignment_id>', methods=['GET', 'POST'])
def edit_assignment(assignment_id):
    if session.get('role') != 'teacher':
        return "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", 403

    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    if request.method == 'POST':
        new_content = request.form['content']
        cursor.execute('UPDATE assignments SET content = ? WHERE id = ?', (new_content, assignment_id))
        conn.commit()
        cursor.execute('SELECT date FROM assignments WHERE id = ?', (assignment_id,))
        date = cursor.fetchone()['date']
        conn.close()
        return redirect(url_for('day_view', date=date))

    cursor.execute('SELECT * FROM assignments WHERE id = ?', (assignment_id,))
    assignment = cursor.fetchone()
    conn.close()

    return render_template('edit_assignment.html', assignment=assignment)

@app.route('/calendar', methods=['GET'])
def calendar():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_date = datetime.datetime.now()
    year = current_date.year
    month = current_date.month

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏—è
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT date FROM assignments WHERE strftime('%Y-%m', date) = ?", (f"{year}-{month:02d}",))
    assignment_dates = {row['date'] for row in cursor.fetchall()}
    conn.close()

    return render_template('calendar.html', year=year, month=month, assignment_dates=assignment_dates)




# üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
@app.route('/day/<date>', methods=['GET', 'POST'])
def day_assignments(date):
    conn = sqlite3.connect('database.db')
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()

    if request.method == 'POST':
        content = request.form['content']
        file = request.files.get('assignment_file')

        file_path = None
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            full_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            file.save(full_path)
            file_path = filename  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞

        cursor.execute('''
            INSERT INTO assignments (date, content, file_path)
            VALUES (?, ?, ?)
        ''', (date, content, file_path))
        conn.commit()

        return redirect(url_for('day_assignments', date=date))

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π
    cursor.execute('SELECT * FROM assignments WHERE date = ?', (date,))
    assignments = cursor.fetchall()
    conn.close()

    return render_template('day_assignments.html', assignments=assignments, date=date)

# üì§ –û—Ç–¥–∞—á–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)




if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=3000)